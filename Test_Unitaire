import unittest
from scrabble import *

Joueur_1 = Joueur()
class Test_Joueur(unittest.TestCase):
    def test_add_letters(self):
        Joueur_1.add_letters()
        #print(Joueur_1.letters)
        self.assertTrue(len(Joueur_1.letters) == 7)

    def test_add_points_if_no_point(self):
        Joueur_1.add_points(20)
        self.assertTrue(Joueur_1.points == 20)

    def test_add_points_if_points(self):
        Joueur_1.points = 10
        Joueur_1.add_points(20)
        self.assertTrue(Joueur_1.points == 30)
    def test_remettre_en_orde(self):
        Joueur_1.letters = ["g","f","e","d","c","b","a"]
        Joueur_1.remettre_en_orde("abcdefg")
        self.assertTrue(Joueur_1.letters == ['a', 'b', 'c', 'd', 'e', 'f', 'g'])
class Test_sac(unittest.TestCase):
    def test_piocher_lettre_type(self):
        sac = Sac()
        A,B,C = Lettres("A",1),Lettres("B",4),Lettres("C",2)
        sac.lettres_dans_le_sac = {A:3,B:4,C:2}
        lettre_pioche = sac.piocher_une_lettre()
        self.assertTrue((type(lettre_pioche.nom) == str) and (type(lettre_pioche.points) == int))
    def test_piocher_lettre_nombre(self):
        sac = Sac()
        A,B,C = Lettres("A",1),Lettres("B",4),Lettres("C",2)
        sac.lettres_dans_le_sac = {A:3,B:4,C:2}
        conditions = {A:3,B:4,C:2}
        lettre_pioche = sac.piocher_une_lettre()
        self.assertTrue(sac.lettres_dans_le_sac[lettre_pioche] == conditions[lettre_pioche]-1)
